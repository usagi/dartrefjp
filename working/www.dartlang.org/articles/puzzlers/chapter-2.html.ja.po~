# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Usagi Ito
# This file is distributed under the same license as the dartrefjp package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: dartrefjp Thu, 08 Mar 2012 06:38:47 +0900\n"
"Report-Msgid-Bugs-To: usagi@WonderRabbitProject.net\n"
"POT-Creation-Date: 2012-03-10 03:58+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: chapter-2.html:13
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<!--[if lt IE 7 ]> <html lang=\"en\" class=\"no-js ie6\"> <![endif]-->\n"
"<!--[if IE 7 ]>    <html lang=\"en\" class=\"no-js ie7\"> <![endif]-->\n"
"<!--[if IE 8 ]>    <html lang=\"en\" class=\"no-js ie8\"> <![endif]-->\n"
"<!--[if IE 9 ]>    <html lang=\"en\" class=\"no-js ie9\"> <![endif]-->\n"
"<!--[if (gt IE 9)|!(IE)]><!--> <html lang=\"en\" class=\"no-js\"> <!--<![endif]-->\n"
"<head>\n"
"\t<meta charset=\"UTF-8\">\n"
"\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n"
"\t<title>Dart Puzzlers: Chapter 2 : Dart : Structured web programming</title>\n"
"\t<link rel=\"stylesheet\" href=\"/css/style.css\">\n"
"\t<link href='http://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:15
#, no-wrap
msgid "\t<link rel=\"author\" href=\"/authors/joshua-bloch.html\">\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:19
#, no-wrap
msgid ""
"\t<link rel=\"alternate\" type=\"application/atom+xml\" href=\"http://news.dartlang.org/feeds/posts/default\" title=\"Atom feed\">\n"
"    <link href=\"https://plus.google.com/109866369054280216564\" rel=\"publisher\">\n"
"\t<script src=\"/js/modernizr.custom.02548.js\"></script>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:21
#, no-wrap
msgid "  <script type=\"text/javascript\">\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:26
#, no-wrap
msgid ""
"    var _gaq = _gaq || [];\n"
"    _gaq.push(['_setAccount', 'UA-26406144-4']);\n"
"    _gaq.push(['_setDomainName', 'dartlang.org']);\n"
"    _gaq.push(['_trackPageview']);\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:32
#, no-wrap
msgid ""
"    (function() {\n"
"      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n"
"      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n"
"      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n"
"    })();\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:34
#, no-wrap
msgid "  </script>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:52
#, no-wrap
msgid ""
"  <script type=\"text/javascript\">\n"
"\twindow.___gcfg = {lang: 'en'};\n"
"\t(function() \n"
"\t{var po = document.createElement(\"script\");\n"
"\tpo.type = \"text/javascript\"; po.async = true;po.src = \"https://apis.google.com/js/plusone.js\";\n"
"\tvar s = document.getElementsByTagName(\"script\")[0];\n"
"\ts.parentNode.insertBefore(po, s);\n"
"\t})();\n"
"  </script>\n"
"</head>\n"
"<body>\n"
"\t<div id=\"container\">\n"
"\t\t<header>\n"
"\t\t  \t<div id=\"plus1\"><div class=\"g-plusone\" data-size=\"standard\" data-count=\"true\"></div></div>\n"
"      \t<a href=\"/\"><img src=\"/imgs/dart-logo.png\" width=\"268\" height=\"116\" alt=\"Dart\"></a>\n"
"\t\t\t  <span id=\"tagline\">Structured web apps</span>\n"
"\t\t</header>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:63
#, no-wrap
msgid ""
"\t\t<nav>\n"
"  <form action=\"/search.html\" id=\"cse-search-box\">\n"
"    <div id=\"search\">\n"
"      <input type=\"hidden\" name=\"cx\" value=\"011220921317074318178:i4mscbaxtru\" />\n"
"      <input type=\"hidden\" name=\"ie\" value=\"UTF-8\" />\n"
"      <input type=\"hidden\" name=\"hl\" value=\"en\" />\n"
"      <input type=\"search\" name=\"q\" id=\"q\" autocomplete=\"off\" placeholder=\"Search\"/>\n"
"    </div>\n"
"  </form>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:95
#, no-wrap
msgid ""
"  <ul>\n"
"    <li><a href=\"/downloads.html\">Downloads</a></li>\n"
"    <li><a href=\"http://news.dartlang.org\">News &amp; Updates</a></li>\n"
"    <li>Getting Started\n"
"      <ul>\n"
"        <li><a href=\"/language-tour/\">Language Tour</a></li>\n"
"        <li><a href=\"/docs/technical-overview/\">Technical Overview</a></li>\n"
"        <li><a href=\"http://synonym.dartlang.org\">Translations from JavaScript</a></li>\n"
"      </ul> </li>\n"
"    <li>Language &amp; Libraries\n"
"      <ul>\n"
"        <li><a href=\"/docs/spec/\">Language Spec</a></li>\n"
"        <li><a href=\"http://api.dartlang.org/\">API Reference</a></li>\n"
"      </ul> </li>\n"
"    <li>Tools\n"
"      <ul>\n"
"        <li><a href=\"http://try.dartlang.org\">Dartboard</a></li>\n"
"        <li><a href=\"/docs/getting-started/editor/\">Dart Editor</a></li>\n"
"        <li><a href=\"/dartium/\">Chromium with the Dart VM</a></li>\n"
"        <li><a href=\"/docs/getting-started/sdk/\">SDK</a></li>\n"
"      </ul> </li>\n"
"    <li>Resources\n"
"      <ul>\n"
"        <li><a href=\"/samples/\">Code Samples</a></li>\n"
"        <li><a href=\"/articles/\">Articles</a></li>\n"
"        <li><a href=\"/slides/\">Presentations</a></li>\n"
"        <li><a href=\"/support/faq.html\">FAQ</a></li>\n"
"        <li><a href=\"/resources/\">More</a></li>\n"
"      </ul> </li>\n"
"    <li><a href=\"/support/\">Contact Us</a></li>\n"
"  </ul>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:98
#, no-wrap
msgid ""
"  <div id=\"pluspage\"><div class=\"g-plus\" data-href=\"https://plus.google.com/109866369054280216564\" data-width=\"100\" data-height=\"131\" data-theme=\"light\"></div></div>\n"
"</nav>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:103
#, no-wrap
msgid ""
"\t\t<div id=\"main\" role=\"main\">\n"
"\t\t\t<article>\n"
"\t\t\t\t<h1>Dart Puzzlers: Chapter 2</h1>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:106
msgid "<p><em>Written by Joshua Bloch <br /> February 2012</em></p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:108
msgid "<p><section></p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:112
msgid ""
"<p>The second chapter of <em>Java Puzzlers</em> is entitled \"Puzzlers with "
"Character,\" and concerns \"strings, characters, and other textual data.\"</"
"p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:114
msgid "<p><section id=\"toc\"></p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:116
msgid "<h4>Contents</h4>"
msgstr ""

#. type: Plain text
#: chapter-2.html:133
#, no-wrap
msgid ""
"<ol class=\"toc\">\n"
"  <li> <a href=\"#11\">Puzzle 11: The Last Laugh</a> </li>\n"
"  <li> <a href=\"#12\">Puzzle 12: ABC</a> </li>\n"
"  <li> <a href=\"#13\">Puzzle 13: Animal Farm</a> </li>\n"
"  <li> <a href=\"#14\">Puzzle 14: Escape Rout</a> </li>\n"
"  <li> <a href=\"#15\">Puzzle 15: Hello Whirled</a> </li>\n"
"  <li> <a href=\"#16\">Puzzle 16: Line Printer</a> </li>\n"
"  <li> <a href=\"#17\">Puzzle 17: Huh?</a> </li>\n"
"  <li> <a href=\"#18\">Puzzle 18: String Cheese</a> </li>\n"
"  <li> <a href=\"#19\">Puzzle 19: Classy Fire</a> </li>\n"
"  <li> <a href=\"#20\">Puzzle 20: What’s My Class?</a> </li>\n"
"  <li> <a href=\"#21\">Puzzle 21:  What’s My Class, Take 2</a> </li>\n"
"  <li> <a href=\"#22\">Puzzle 22: Dupe of URL</a> </li>\n"
"  <li> <a href=\"#23\">Puzzle 23: No Pain, No Gain</a> </li>\n"
"  <li> <a href=\"#summary\">Summary</a> </li>\n"
"</ol>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:136
msgid "<p></section></p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:138
msgid "<h2 id=\"11\"> Puzzle 11: The Last Laugh </h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:141
msgid ""
"<p>In Java, this program that appears to print <code>HaHa</code> actually "
"prints <code>Ha169</code>.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:150
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \">\n"
"public class LastLaugh {\n"
"  public static void main(String args[]) {\n"
"    System.out.print(\"H\" + \"a\");\n"
"    System.out.print('H' + 'a');\n"
"  }\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:154
msgid ""
"<p>The puzzler is fixed by Dart's lack of a (deficient) char type; there is "
"no direct Dart equivalent of the program.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:158
msgid ""
"<p>In the book (<em>Java Puzzlers</em>), the solution to this puzzle "
"contains a related puzzle: Can you guess what the following statement prints?"
"</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:162
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \"> System.out.println(\"2 + 2 "
"= \" + 2+2); </pre>"
msgstr ""

#. type: Plain text
#: chapter-2.html:165
msgid "<p>Translating this mini-puzzle into Dart, we get:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:169
msgid ""
"<pre class=\"prettyprint lang-dart linenums:0 \"> print('2 + 2 = ' + 2+2); </"
"pre>"
msgstr ""

#. type: Plain text
#: chapter-2.html:179
msgid ""
"<p>Both the Java and Dart versions print <code>2 + 2 = 22</code>, which may "
"not be what you expected.  Given Dart's support for \"string interpolation,"
"\" the easiest way to fix this puzzler would be to eliminate the string "
"concatenation operator from Dart.  I suspect that, after a brief period of "
"mourning, no one would miss it.  It's just as easy, and arguably clearer, to "
"say:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:183
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \"> print('2 + 2 = ${2 + 2}'); "
"</pre>"
msgstr ""

#. type: Plain text
#: chapter-2.html:191
msgid ""
"<p>This version does print <code>2 + 2 = 4</code>, just as you were taught "
"in elementary school.  String interpolation is even nicer when you're "
"printing the value of a variable rather than a more complex expression, as "
"you can leave out the braces:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:195
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \">\n"
"    print('$i bottles of beer on the wall, $i bottles of beer');\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:204
msgid ""
"<p>Although it might seem that you'd get less compile-time checking, Dart "
"Editor picks up the slack.  Another reason for getting rid of the String "
"concatenation operator is that it can easily lead to performance problems "
"(see <em>Effective Java</em> Item 51: <em>Beware the performance of string "
"concatenation</em> for details).</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:216
msgid ""
"<p>Note that eliminating the string concatenation operator from Dart has no "
"effect on the language; it is merely a library change.  It consists of "
"removing the + method from the String class, and eliminating all uses of "
"this method from the Dart code base.  I'm working on this as we speak.  You "
"can stay one step ahead of the game by eliminating uses of the String "
"concatenation operator from your Dart programs today.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:218
msgid "<h2 id=\"12\">Puzzle 12: ABC</h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:221
msgid "<p>Consider this Java program:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:231
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \">\n"
"public class Abc {\n"
"  public static void main(String[] args) {\n"
"    String letters = \"ABC\";\n"
"    char[] numbers = { '1', '2', '3' };\n"
"    System.out.println(letters + \" easy as \" + numbers);\n"
"  }\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:240
msgid ""
"<p>Sadly, it prints <code>ABC easy as [C@16f0472</code> (or some such), "
"because Java's arrays don't override the toString method they inherit from "
"Object.  This trap is notorious for tripping up beginning programming "
"students.  Translating the program to Dart, we get:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:248
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-dart linenums:0 \">\n"
"main() {\n"
"  String letters = 'ABC';\n"
"  List<String> numbers = [ '1', '2', '3' ];\n"
"  print(letters + ' easy as ' + numbers);\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:251
msgid "<p>or if you don't like types:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:259
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-dart linenums:0 \">\n"
"main() {\n"
"  var letters = 'ABC';\n"
"  var numbers = [ '1', '2', '3' ];\n"
"  print(letters + ' easy as ' + numbers);\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:273
msgid ""
"<p>Because the Dart equivalent of Java’s array is a List, which is a full-"
"fledged Collection, I expected the Dart version to work just fine.  It "
"didn’t.  It printed <code>ABC easy as Object</code>, essentially replicating "
"the Java behavior.  So I <a href=\"http://blog.sethladd.com/2012/02/pretty-"
"print-dart-collections.html\">fixed it</a>! Now the Dart version prints "
"<code>ABC easy as [1, 2, 3]</code> and all is well (assuming you’re running "
"the \"bleeding edge\" build).  This is true for the VM and for DartBoard.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:275
msgid "<h2 id=\"13\">Puzzle 13: Animal Farm</h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:278 chapter-2.html:319
msgid "<p>Here’s the Java program:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:284
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \">\n"
"public class AnimalFarm {\n"
"  public static void main(String[] args) {\n"
"    final String pig = \"length: 10\";\n"
"    final String dog = \"length: \" + pig.length();\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:290
#, no-wrap
msgid ""
"    System.out.println(\"Animals are equal: \"\n"
"                       + pig == dog);\n"
"  }\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:298
msgid ""
"<p>It doesn’t print <code>Animals are equal: true</code>.  It doesn’t print "
"<code>Animals are equal: false</code>, either.  It just prints <code>false</"
"code>. Why? Because the + operator binds tighter than the == operator.  "
"Here’s the Dart version:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:303
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-dart linenums:0 \">\n"
"main() {\n"
"  final String pig = 'length: 10';\n"
"  final String dog = 'length: ' + pig.length;\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:308
#, no-wrap
msgid ""
"  print('Animals are equal: '\n"
"        + pig == dog);\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:314
msgid ""
"<p>Sadly, it fails in exactly the same fashion as the Java version.  "
"Happily, we’re hard at work eliminating the string concatenation operator "
"from Dart, killing this puzzler dead.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:316
msgid "<h2 id=\"14\">Puzzle 14: Escape Rout</h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:328
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \">\n"
"public class EscapeRout {\n"
"  public static void main(String[] args) {\n"
"    // \\u0022 is the Unicode escape for double-quote (\")\n"
"    System.out.println(\"a\\u0022.length() + \\u0022b\".length());\n"
"  }\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:338
msgid ""
"<p>A cursory glance suggests that it should print <code>26</code>, the "
"number of characters between the quotation marks.  A deeper analysis "
"suggests <code>16</code>, as <code>\\u0022</code> represents but a single "
"character.  In fact, it prints <code>2</code>, as the Unicode escapes are "
"translated into the characters they represent before the compiler parses the "
"program into tokens.  Therefore, the program is effectively:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:347
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \">\n"
"public class EscapeRout {\n"
"  public static void main(String[] args) {\n"
"    // \" is the Unicode escape for double-quote (\")\n"
"    System.out.println(\"a\".length() + \"b\".length());\n"
"  }\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:350
msgid "<p>Here’s the program translated into Dart:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:357
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-dart linenums:0 \">\n"
"main() {\n"
"  // \\u0022 is the Unicode escape for double-quote (\")\n"
"  print(\"a\\u0022.length + \\u0022b\".length);\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:365
msgid ""
"<p>It prints <code>14</code> as per the \"deeper analysis\" above.  Why 14 "
"instead of 16? Because Dart doesn’t use parens to get the length of an "
"array.  But the key point is that Dart <em>does</em> support Unicode "
"escapes, but <em>doesn’t</em> accept them everywhere and process them early "
"in the compilation process as Java does.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:367
msgid "<h2 id=\"15\">Puzzle 15: Hello Whirled</h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:371
msgid ""
"<p>Here’s the original Java program, which would appear to print <code>Hello "
"world</code>:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:385
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \">\n"
"/**\n"
" * Generated by the IBM IDL-to-Java compiler, version 1.0\n"
" * from F:\\TestRoot\\apps\\a1\\units\\include\\PolicyHome.idl\n"
" * Wednesday, June 17, 1998 6:44:40 o'clock AM GMT+00:00\n"
" */\n"
"public class Test {\n"
"  public static void main(String[] args) {\n"
"    System.out.print(\"Hell\");\n"
"    System.out.println(\"o world\");\n"
"  }\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:397
msgid ""
"<p>Sadly, it doesn’t compile, due to a malformed Unicode escape.  Where is "
"it? In the comment, of course.  It’s hidden in the file name: <code>\\units</"
"code>.  As soon as the compiler sees a character that isn’t a hex digit "
"after the <code>\\u</code>, it’s all over.  You might think the compiler "
"would ignore Unicode escapes in comments, but it doesn’t know it’s in a "
"comment because it hasn’t parsed the program yet.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:399
msgid "<p>Here’s the (rough) Dart equivalent:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:411
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-dart linenums:0 \">\n"
"/**\n"
" * Generated by the IBM IDL-to-Java compiler, version 1.0\n"
" * from F:\\TestRoot\\apps\\a1\\units\\include\\PolicyHome.idl\n"
" * Wednesday, June 17, 1998 6:44:40 o'clock AM GMT+00:00\n"
" */\n"
"main() {\n"
"  print(\"Hell\");\n"
"  print(\"o world\");\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:414
msgid "<p>This program prints:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:418
msgid "<pre><code>Hell o world </code></pre>"
msgstr ""

#. type: Plain text
#: chapter-2.html:428
msgid ""
"<p>demonstrating that Dart has fixed the puzzler.  It does, however, raise "
"the issue that Dart doesn’t have a way to print a string without a trailing "
"newline character.  Because Dart is designed primarily as a web programming "
"language, console support is minimal.  But there’s no reason it has to stay "
"that way.  I hope to provide a proper console facility some day.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:430
msgid "<h2 id=\"16\">Puzzle 16: Line Printer</h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:435
msgid ""
"<p>Here’s the Java program, which looks like it ought to print a couple of "
"newline characters:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:445
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \">\n"
"public class LinePrinter {\n"
"  public static void main(String[] args) {\n"
"    // Note: \\u000A is Unicode representation of linefeed (LF)\n"
"    char c = 0x000A;\n"
"    System.out.println(c);\n"
"  } \n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:454
msgid ""
"<p>Sadly, it doesn’t compile, as the Unicode escape in the single-line "
"comment (\\u000A)  terminates the comment, leaving the remainder of the line "
"as garbage in the program.  This is very similar to what happened in the "
"previous puzzle, except that the Unicode escape is well-formed.  Here’s the "
"Dart version:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:462
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-dart linenums:0 \">\n"
"main() {\n"
"  // Note: \\u000A is Unicode representation of linefeed (LF)\n"
"  int c = 0x000A;\n"
"  print(new String.fromCharCodes([c]));\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:469
msgid ""
"<p>It prints two newline characters, exactly as you’d expect.  Its verbosity "
"does suggest that String should perhaps have a constructor that takes a "
"single char code, but hey, we can fix that.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:471
msgid "<h2 id=\"17\">Puzzle 17: Huh?</h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:475
msgid ""
"<p>Here’s the Java program (and I hope you have your barf bag near at hand):"
"</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:489
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \"> "
"\\u0070\\u0075\\u0062\\u006c\\u0069\\u0063\\u0020\\u0020\\u0020\\u0020 "
"\\u0063\\u006c\\u0061\\u0073\\u0073\\u0020\\u0055\\u0067\\u006c\\u0079 "
"\\u007b\\u0070\\u0075\\u0062\\u006c\\u0069\\u0063\\u0020\\u0020\\u0020 "
"\\u0020\\u0020\\u0020\\u0020\\u0073\\u0074\\u0061\\u0074\\u0069\\u0063 "
"\\u0076\\u006f\\u0069\\u0064\\u0020\\u006d\\u0061\\u0069\\u006e\\u0028 "
"\\u0053\\u0074\\u0072\\u0069\\u006e\\u0067\\u005b\\u005d\\u0020\\u0020 "
"\\u0020\\u0020\\u0020\\u0020\\u0061\\u0072\\u0067\\u0073\\u0029\\u007b "
"\\u0053\\u0079\\u0073\\u0074\\u0065\\u006d\\u002e\\u006f\\u0075\\u0074 "
"\\u002e\\u0070\\u0072\\u0069\\u006e\\u0074\\u006c\\u006e\\u0028\\u0020 "
"\\u0022\\u0048\\u0065\\u006c\\u006c\\u006f\\u0020\\u0077\\u0022\\u002b "
"\\u0022\\u006f\\u0072\\u006c\\u0064\\u0022\\u0029\\u003b\\u007d\\u007d </pre>"
msgstr ""

#. type: Plain text
#: chapter-2.html:496
msgid ""
"<p>If you have any doubts that it’s a legitimate Java program copy it, paste "
"it into a file named Ugly.java, and run it.  Nothing like this will run in "
"Dart because Unicode escapes are restricted to string literals.  Now isn’t "
"that comforting?</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:498
msgid "<h2 id=\"18\">Puzzle 18: String Cheese</h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:503
msgid ""
"<p>Here’s the original program, which translates a sequence of bytes into a "
"string and then prints every character code in the string:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:516
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-java linenums:1 \">\n"
"public class StringCheese {\n"
"  public static void main(String args[]) {\n"
"    byte bytes[] = new byte[256];\n"
"    for(int i = 0; i < 256; i++)\n"
"      bytes[i] = (byte)i;\n"
"    String str = new String(bytes);\n"
"    for(int i = 0, n = str.length(); i < n; i++)\n"
"      System.out.print((int)str.charAt(i) + \" \");\n"
"  }\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:531
msgid ""
"<p>You might expect it to print the byte values it started with, but the "
"behavior turns out to be unspecified.  It depends on the Java Runtime "
"Environment’s <em>default charset</em>.  This program has no equivalent in "
"Dart, as Dart does not (yet) have facilities for translating byte sequences "
"into Unicode character sequences.  If and when Dart does acquire such "
"facilities, rest assured: they will not rely on an unspecified default "
"charset.  Actually, it turns out that there is one class that translates "
"byte sequences to char sequences and that has a default encoding: "
"StringInputStream.  Currently the default encoding is not specified, but we "
"<em>will</em> fix this.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:533
msgid "<h2 id=\"19\">Puzzle 19: Classy Fire</h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:537
msgid "<p>Here’s the Java program, which appears to classify characters:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:544
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-java linenums:1 \">\n"
"public class Classifier {\n"
"  public static void main(String[] args) {\n"
"    System.out.println(\n"
"      classify('n') + classify('+') + classify('2'));\n"
"  }\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:558
#, no-wrap
msgid ""
"  static String classify(char ch) {\n"
"    if (\"0123456789\".indexOf(ch) >= 0)\n"
"      return \"NUMERAL \";\n"
"    if (\"abcdefghijklmnopqrstuvwxyz\".indexOf(ch) >= 0)\n"
"      return \"LETTER \";\n"
"/*\n"
" *      if (\"+-*/&|!=\".indexOf(ch) >= 0)\n"
" *          return \"OPERATOR \";\n"
" */\n"
"      return \"UNKNOWN \";\n"
"  } \n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:562
msgid ""
"<p>In fact, it doesn’t compile as the multi-line comment is terminated "
"\"accidentally\" in the middle of this line:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:565
#, no-wrap
msgid ""
"<pre> *      if (\"+-<b>*/</b>&|!=\".indexOf(ch) >= 0)\n"
"               ^^</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:568
msgid "<p>Here is the Dart equivalent:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:573
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-dart linenums:1 \">\n"
"main() {\n"
"  print(classify('n') + classify('+') + classify('2'));\n"
"}\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:587
#, no-wrap
msgid ""
"String classify(String ch) {\n"
"  if ('0123456789'.indexOf(ch) >= 0)\n"
"    return 'NUMERAL ';\n"
"  if ('abcdefghijklmnopqrstuvwxyz'.indexOf(ch) >= 0)\n"
"    return 'LETTER ';\n"
"<b>/*</b>\n"
" *  (Operators not supported yet) \n"
" *  if ('+-<b>*/</b>&|!='.indexOf(ch) >= 0)\n"
" *      return 'OPERATOR ';\n"
" */\n"
"  return 'UNKNOWN ';\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:599
msgid ""
"<p>This puzzler behaves exactly the same in Dart as it does in Java, which "
"is to say it won’t compile in Dart, either.  But that’s not such a bad "
"thing.  The alternative, which is to have multi-line comments nest, is no "
"better.  This puzzle teaches the same lesson to Dart programmers as it "
"teaches Java programmers: <strong>If you must comment out code, do it with "
"single-line comments</strong>, as most IDEs do:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:612
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-dart linenums:1 \">\n"
"String classify(String ch) {\n"
"  if ('0123456789'.indexOf(ch) >= 0)\n"
"    return 'NUMERAL ';\n"
"  if ('abcdefghijklmnopqrstuvwxyz'.indexOf(ch) >= 0)\n"
"    return 'LETTER ';\n"
"<b>//</b>  (Operators not supported yet) \n"
"<b>//</b>  if ('+-*/&|!='.indexOf(ch) >= 0)\n"
"<b>//</b>    return 'OPERATOR ';\n"
"  return 'UNKNOWN ';\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:617 chapter-2.html:701
msgid "<br>"
msgstr ""

#. type: Plain text
#: chapter-2.html:620
msgid "<h2 id=\"20\">Puzzle 20: What’s My Class?</h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:624
msgid ""
"<p>This Java puzzler can’t be be directly translated into Dart, as Dart "
"lacks the required reflection facilities:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:627
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \"> package com.javapuzzlers;"
msgstr ""

#. type: Plain text
#: chapter-2.html:635
#, no-wrap
msgid ""
"public class Me {\n"
"  public static void main(String[] args) {\n"
"    System.out.println(\n"
"      Me.class.getName().replaceAll(\".\", \"/\") + \".class\");\n"
"  }\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:644
msgid ""
"<p>But the real problem has nothing to do with reflection.  The program "
"prints <code>///////////////////.class</code> due to surprising behavior in "
"Java’s <code>String.replaceAll</code> method.  The first parameter is a not "
"an ordinary string, but a regular expression.  Luckily, this is not true of "
"Dart’s analogous function, as demonstrated by the following program:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:650
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-dart linenums:0 \">\n"
"main() {\n"
"  print('I.like.cheese'.replaceAll('.', '/'));\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:654
msgid ""
"<p>This program prints <code>I/like/cheese</code>, just as you’d hope.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:656
msgid "<h2 id=\"21\">Puzzle 21: What’s My Class, Take 2</h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:663
msgid ""
"<p>This puzzle is similar to the previous one, in that it uses Java’s basic "
"reflection facilities, but it’s really about the <code>replaceAll</code> "
"function.  The Java program looks like it should return the file path "
"corresponding to the class:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:667
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \"> package com.javapuzzlers; "
"import java.io.File;"
msgstr ""

#. type: Plain text
#: chapter-2.html:675
#, no-wrap
msgid ""
"public class MeToo {\n"
"  public static void main(String[] args) {\n"
"  System.out.println(MeToo.class.getName().\n"
"    replaceAll(\"\\\\.\", File.separator) + \".class\");\n"
"  }\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:682
msgid ""
"<p>It works on Linux but on Windows, it fails with a "
"<code>StringIndexOutOfBoundsException</code>, because the second parameter "
"of <code>replaceAll</code> is not an ordinary string but a <em>replacement "
"string</em>, as defined in the Java regex spec.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:692
msgid ""
"<p>Again, we can’t exactly port the program to Dart, because Dart lacks a "
"reflection facility (for now), but the underlying problem (with "
"<code>replaceAll</code>)  has been fixed.  Also Dart has a nifty way to "
"suppress escape character processing in string literals: string literals "
"preceded with an at-sign are known as <em>raw strings</em>, and no "
"postprocessing of escapes or interpolation is done.  So this program prints "
"<code>I\\still\\like\\cheese</code>:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:698
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-dart linenums:0 \">\n"
"main() {\n"
"  print(\"I.still.like.cheese\".replaceAll('.', @'\\'));\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:706
msgid "<h2 id=\"22\">Puzzle 22: Dupe of URL</h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:711
msgid ""
"<p>Here’s a very strange Java program.  It looks like it shouldn’t compile, "
"but it does.  It even runs:</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:721
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-java linenums:0 \">\n"
"public class BrowserTest {\n"
"  public static void main(String[] args) {\n"
"    System.out.print(\"iexplore:\");\n"
"    http://www.google.com;\n"
"    System.out.println(\":maximize\");\n"
"  }\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:726
msgid ""
"<p>So what does it do? Nothing much.  It just prints <code>:iexplore::"
"maximize</code>.  Here it is ported to Dart.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:734
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-dart linenums:0 \">\n"
"main() {\n"
"  print(\"chrome:\");\n"
"  http://www.google.com;\n"
"  print(\":maximize\");\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:750
msgid ""
"<p>Amazingly, it still compiles and runs.  Again it just prints <code>chrome:"
"</code> and <code>maximize:</code>.  Why can you drop URLs into the middle "
"of Java and Dart programs? If you put the program into a syntax-highlighting "
"IDE or text editor, all will become apparent.  The URL is parsed as a label "
"(<code>http:</code>)  followed by a single line comment (<code>//www.google."
"com;</code>).  So why is it legal to put a label at an arbitrary position in "
"a language without a <b>goto</b> statement? Search me.  If it were up to me, "
"it wouldn’t be.  That said, this is not a very important puzzler.  I can’t "
"imagine a serious bug popping up because this is legal.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:752
msgid "<h2 id=\"23\">Puzzle 23: No Pain, No Gain</h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:760
msgid ""
"<p>Here’s a Java program that might appear to print one of three words: "
"<code>Pain</code>, <code>Gain</code>, and <code>Main</code> chosen randomly, "
"with equal likelihood.  But the title of the puzzle suggests that that might "
"not be the case.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:763
msgid "<pre class=\"prettyprint lang-java linenums:0 \"> import java.util.*;"
msgstr ""

#. type: Plain text
#: chapter-2.html:766
#, no-wrap
msgid ""
"public class Rhymes {\n"
"  private static Random rnd = new Random();\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:781
#, no-wrap
msgid ""
"  public static void main(String[] args) {\n"
"    StringBuffer word = null;\n"
"    switch(rnd.nextInt(2)) {\n"
"      case 1:  word = new StringBuffer('P');\n"
"      case 2:  word = new StringBuffer('G');\n"
"      default: word = new StringBuffer('M');\n"
"    }\n"
"    word.append('a');\n"
"    word.append('i');\n"
"    word.append('n');\n"
"    System.out.println(word);\n"
"  }\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:786
msgid ""
"<p>In fact, the program prints the non-word <code>ain</code> every time you "
"run it.  And why is that? The program contains 3 (!) bugs.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:792
msgid ""
"<p>First there’s a “fencepost error” in the expression <code>rnd.nextInt(2)</"
"code>.  The argument is the <em>modulus</em>: the random number generator "
"returns 0 or 1, never 2.  This is a programming error, pure and simple, not "
"a platform problem.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:798
msgid ""
"<p>Second, the switch statement is missing a break after the first two "
"cases, so the first two cases fall through, and word is always set to "
"<code>new StringBuffer('M')</code>.  Then the characters <code>a</code>, "
"<code>i</code>, and <code>n</code> are appended in turn.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:819
msgid ""
"<p>At this point, you might suspect that the string buffer would contain "
"<code>Main</code>, but it doesn’t; it contains <code>ain</code>.  Why? The "
"problem is the constructor, <code>new StringBuffer('M')</code>.  Note that "
"the argument is a <code>char</code>, not a <code>String</code>.  Sadly, "
"<code>StringBuffer</code> lacks a <code>char</code> constructor.  But that’s "
"OK; <code>StringBuffer</code> does have an <code>int</code> constructor, and "
"the compiler happily and silently converts the <code>char</code> to an "
"<code>int</code> (a primitive widening conversion).  And what does the "
"<code>int</code> represent? The <em>initial</em> capacity of the string "
"buffer, or the length of the <code>char</code> array backing the buffer.  "
"But the buffer is initially empty.  So the mysterious behavior is explained."
"</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:821
msgid "<p>What happens when we do a naive translation to Dart?</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:836
#, no-wrap
msgid ""
"<pre class=\"prettyprint lang-dart linenums:0 \">\n"
"main() {\n"
"  StringBuffer word = null;\n"
"  switch ((Math.random() * 2).toInt()) {\n"
"    case 1:  word = new StringBuffer('P');\n"
"    case 2:  word = new StringBuffer('G');\n"
"    default: word = new StringBuffer('M');\n"
"  }\n"
"  word.add('a');\n"
"  word.add('i');\n"
"  word.add('n');\n"
"  print(word);\n"
"}\n"
"</pre>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:842
msgid ""
"<p>Of course the fencepost error remains, but that’s OK; it’s “pilot error,” "
"and we know enough not to make that error.  The most serious trap has been "
"fixed in the platform: Dart doesn’t have Java’s problematic char type.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:864
msgid ""
"<p>Sadly, the fallthrough problem has not been eliminated.  If you run this "
"program with the 2 changed to a 3 on Dartboard, you’ll find that ⅓ of the "
"time it prints <code>Main</code>, and ⅔ of the time, it fails at "
"<em>runtime</em> with the error message “Switch case fall-through!” I am not "
"thrilled with this behavior.  I have tried to convince my colleagues that it "
"should be a compile-time error to have more than one statement after a "
"sequence of case labels.  In other words, I believe the switch statement "
"should function much like every other control flow statement: if you want to "
"put multiple statements in a branch, you should have to surround them in "
"brackets.  I believe the fallthrough was questionable even in the ‘70s, when "
"the C programming language was developed, and Java should not have "
"propagated the mistake into the ‘90s.  I see no reason the syntax of a "
"language developed in the new millenium should allow a fallthrough.  And I "
"<em>really</em> don’t understand why it’s syntactically permissible but "
"fails at runtime.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:888
msgid ""
"<p>But wait, there’s more: If you run the program on the VM, you’ll find "
"that it <em>always</em> prints <code>Main</code>, whether or not you put "
"break statements after each case! Why? Because there is (currently) no way "
"to seed the random number generator, and it always uses the same seed.  But "
"don’t worry, this will definitely be fixed.  I intend to provide a proper "
"pseudorandom number generator facility with reasonable default seeding, "
"manual seeding, multiple instances, multiple implementations, and proper "
"support for integers (not just doubles).  Oh, one more thing about the "
"behavior of this program under the VM: if you put the body of the main "
"method in a loop, you’ll see that the runtime fallthrough behavior is "
"slightly different in the VM and on Dartboard: in the VM, you get a <a href="
"\"http://api.dartlang.org/dart_core/FallThroughError.html\">“Switch case "
"fall-through” exception</a> (with stack trace) at runtime, rather a simple "
"error message.</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:890
msgid "<h2 id=\"summary\">Summary</h2>"
msgstr ""

#. type: Plain text
#: chapter-2.html:895
msgid ""
"<p>That’s it for Chapter 2.  Now the moment you’ve all been waiting for: how "
"does Dart stack up against Java?</p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:907
msgid ""
"<p>Well, the chapter has 13 puzzles.  Nine are clear wins for Dart, in that "
"the trap has been eliminated (11, 12, 14, 15, 16, 17, 18, 20, and 21).  One "
"trap will be eliminated from Dart when ongoing work is complete (13).  Two "
"haven't been fixed, but aren't really worth fixing either (19 and 22).  And "
"one (23) is every bit as bad in Dart as it was in Java.  But with a little "
"luck, maybe we'll fix it.  See you soon for another chapter of Puzzler fun.</"
"p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:910
msgid ""
"<p><link href=\"/css/style.css\" type=\"text/css\" rel=\"stylesheet\"> <link "
"href=\"/css/prettify.css\" type=\"text/css\" rel=\"stylesheet\"></p>"
msgstr ""

#. type: Plain text
#: chapter-2.html:912
msgid "<script type=\"text/javascript\" src=\"/js/prettify.js\"></script>"
msgstr ""

#. type: Plain text
#: chapter-2.html:919
#, no-wrap
msgid ""
"<script>\n"
"window.addEventListener(\"load\", function() {\n"
"  prettyPrint();\n"
"})\n"
"</script>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:923
#, no-wrap
msgid ""
"\t\t\t</article>\n"
"\t\t</div>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:933
#, no-wrap
msgid ""
"\t\t<footer>\n"
"\t\t\t<p>\n"
"\t\t\t  Except as otherwise <a href=\"http://code.google.com/policies.html#restrictions\">noted</a>, the content of this page is licensed under the <a \t\thref=\"http://creativecommons.org/licenses/by/3.0/\">Creative Commons Attribution 3.0 License</a>, and code samples are licensed under the <a href=\"http://code.google.com/google_bsd_license.html\">BSD License</a>.\n"
"\t\t\t</p>\n"
"\t\t\t<p>\n"
"\t\t\t\t<a href=\"/tos.html\" style=\"border-right: 1px solid black; padding-right: 5px\">Terms of Service</a>\n"
"\t\t\t\t<a href=\"http://www.google.com/intl/en/privacy/privacy-policy.html\">Privacy Policy</a>\n"
"\t\t\t</p>\n"
"\t</footer>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:935
#, no-wrap
msgid "\t</div>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:940
#, no-wrap
msgid ""
"\t<!--[if lt IE 7 ]>\n"
"\t<script src=\"js/dd_belatedpng.js\"></script>\n"
"\t<script> DD_belatedPNG.fix('img, .png_bg');</script>\n"
"\t<![endif]-->\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:948
#, no-wrap
msgid ""
"\t<script>\n"
"    (function() {\n"
"      var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;\n"
"      po.src = 'https://apis.google.com/js/plusone.js';\n"
"      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);\n"
"    })();\n"
"\t</script>\n"
msgstr ""

#. type: Plain text
#: chapter-2.html:951
msgid "</body> </html>"
msgstr ""
